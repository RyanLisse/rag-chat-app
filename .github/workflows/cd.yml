name: CD

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production

env:
  BUN_VERSION: latest
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine.outputs.environment }}
      should_deploy: ${{ steps.determine.outputs.should_deploy }}
    steps:
      - name: Determine deployment environment
        id: determine
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" =~ ^refs/tags/v.* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    name: Build and Push Docker Image
    needs: determine-environment
    if: needs.determine-environment.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=${{ needs.determine-environment.outputs.environment }}-latest

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUN_VERSION=${{ env.BUN_VERSION }}
            BUILD_DATE=${{ github.event.repository.updated_at }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}

  deploy:
    name: Deploy to ${{ needs.determine-environment.outputs.environment }}
    needs: [determine-environment, build-and-push]
    if: needs.determine-environment.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.determine-environment.outputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    concurrency:
      group: deploy-${{ needs.determine-environment.outputs.environment }}
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        id: deploy
        if: needs.determine-environment.outputs.environment != 'production' || github.event_name == 'workflow_dispatch'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: ${{ needs.determine-environment.outputs.environment == 'production' && '--prod' || '' }}
          scope: ${{ secrets.VERCEL_ORG_ID }}
          alias-domains: |
            ${{ needs.determine-environment.outputs.environment == 'development' && 'dev-rag-chat.vercel.app' || '' }}
            ${{ needs.determine-environment.outputs.environment == 'staging' && 'staging-rag-chat.vercel.app' || '' }}

      - name: Run database migrations
        run: |
          export DATABASE_URL=${{ secrets[format('DATABASE_URL_{0}', upper(needs.determine-environment.outputs.environment))] }}
          bun run db:migrate
        env:
          NODE_ENV: ${{ needs.determine-environment.outputs.environment }}

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to ${{ needs.determine-environment.outputs.environment }} ${{ job.status }}
            Actor: ${{ github.actor }}
            Commit: ${{ github.sha }}
            Environment: ${{ needs.determine-environment.outputs.environment }}
            URL: ${{ steps.deploy.outputs.url }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  post-deployment-tests:
    name: Post-Deployment Tests
    needs: [determine-environment, deploy]
    if: needs.determine-environment.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run smoke tests
        run: |
          export TEST_URL=${{ needs.deploy.outputs.url }}
          bun run test:smoke
        env:
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}

      - name: Run health checks
        run: |
          URL="${{ needs.deploy.outputs.url }}/api/health"
          for i in {1..5}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
            if [ "$response" = "200" ]; then
              echo "Health check passed"
              exit 0
            fi
            echo "Health check attempt $i failed with status $response"
            sleep 10
          done
          echo "Health checks failed after 5 attempts"
          exit 1

  rollback:
    name: Rollback Deployment
    needs: [determine-environment, deploy, post-deployment-tests]
    if: failure() && needs.determine-environment.outputs.environment == 'production'
    runs-on: ubuntu-latest
    steps:
      - name: Rollback Vercel deployment
        run: |
          echo "Rolling back production deployment"
          # Add rollback logic here
        
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "Production deployment rolled back due to failed post-deployment tests",
              color: "danger"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}