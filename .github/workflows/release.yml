name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

env:
  BUN_VERSION: latest

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      version: ${{ steps.release.outputs.version }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Determine version bump
        id: version-bump
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "bump_type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          else
            # Analyze commit messages to determine bump type
            COMMIT_MESSAGES=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%s")
            
            if echo "$COMMIT_MESSAGES" | grep -qE "^(feat|feature)(\(.+\))?!:"; then
              echo "bump_type=major" >> $GITHUB_OUTPUT
            elif echo "$COMMIT_MESSAGES" | grep -qE "^(feat|feature)(\(.+\))?:"; then
              echo "bump_type=minor" >> $GITHUB_OUTPUT
            else
              echo "bump_type=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Install conventional-changelog-cli
          bunx conventional-changelog-cli -p angular -i CHANGELOG.md -s -r 0
          
          # Extract latest changes for release notes
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LATEST_TAG" ]; then
            CHANGES=$(git log --pretty=format:"- %s" | head -20)
          else
            CHANGES=$(git log $LATEST_TAG..HEAD --pretty=format:"- %s")
          fi
          
          echo "changes<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Use npm version to bump version
          case "${{ steps.version-bump.outputs.bump_type }}" in
            major)
              NEW_VERSION=$(npm version major --no-git-tag-version)
              ;;
            minor)
              NEW_VERSION=$(npm version minor --no-git-tag-version)
              ;;
            patch)
              NEW_VERSION=$(npm version patch --no-git-tag-version)
              ;;
            prerelease)
              NEW_VERSION=$(npm version prerelease --preid=beta --no-git-tag-version)
              ;;
          esac
          
          echo "New version: $NEW_VERSION"
          echo "new_version=${NEW_VERSION#v}" >> $GITHUB_OUTPUT

      - name: Update lockfile
        run: |
          rm -rf node_modules bun.lockb
          bun install

      - name: Commit changes
        id: commit
        run: |
          git add package.json bun.lockb CHANGELOG.md
          git commit -m "chore(release): ${{ steps.bump-version.outputs.new_version }}

          [skip ci]"
          
          # Create tag
          git tag -a "v${{ steps.bump-version.outputs.new_version }}" -m "Release v${{ steps.bump-version.outputs.new_version }}"
          
          # Push changes and tag
          git push origin main
          git push origin "v${{ steps.bump-version.outputs.new_version }}"
          
          echo "tag_name=v${{ steps.bump-version.outputs.new_version }}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.commit.outputs.tag_name }}
          release_name: Release ${{ steps.commit.outputs.tag_name }}
          body: |
            ## What's Changed
            
            ${{ steps.changelog.outputs.changes }}
            
            ## Full Changelog
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          draft: false
          prerelease: ${{ steps.version-bump.outputs.bump_type == 'prerelease' }}

      - name: Update release output
        run: |
          echo "release_created=true" >> $GITHUB_OUTPUT
          echo "version=${{ steps.bump-version.outputs.new_version }}" >> $GITHUB_OUTPUT

  publish-npm:
    name: Publish to NPM
    needs: release
    if: needs.release.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.tag_name }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build package
        run: bun run build

      - name: Publish to NPM
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  build-docker:
    name: Build and Push Docker Image
    needs: release
    if: needs.release.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.tag_name }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ needs.release.outputs.version }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.release.outputs.version }}

  deploy-production:
    name: Deploy to Production
    needs: [release, build-docker]
    if: needs.release.outputs.release_created == 'true' && !contains(needs.release.outputs.version, 'beta')
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://rag-chat.vercel.app
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying version ${{ needs.release.outputs.version }} to production"
          # Add production deployment logic here

      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Production deployment of v${{ needs.release.outputs.version }} ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}